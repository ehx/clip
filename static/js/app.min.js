'use strict';

var app = angular.module('app', [
  'ngResource',
  'ngCookies',
  'ngRoute',
  'ui.materialize',
  'ui.bootstrap',
  'ui.select',
  'ngSanitize',
  'xeditable',
  'toaster',
  'ngAnimate',
  'textAngular',
  'ngFileUpload',
  'NgSwitchery',
  'isteven-multi-select',
  'LocalStorageModule',
  'ngCsv',
  'angular.filter',
  'ngTouch',
  'colorpicker.module',
  'scDateTime'
]);

app.controller('taskController', taskFunction);

function taskFunction($scope, taskResource, UserClientResource, $location, $timeout, statusResource, moduleResource, urgencyResource, loginService) {

    $scope.printDiv = function (divName) {

    var printContents = document.getElementById(divName).innerHTML;
    var originalContents = document.body.innerHTML;      

    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
        var popupWin = window.open('', '_blank', 'width=600,height=600,scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
        popupWin.window.focus();
        popupWin.document.write('<!DOCTYPE html><html><head>' +
            '<link rel="stylesheet" type="text/css" href="style.css" />' +
            '</head><body onload="window.print()"><div class="reward-body">' + printContents + '</div></html>');
        popupWin.onbeforeunload = function (event) {
            popupWin.close();
            return '\n';
        };
        popupWin.onabort = function (event) {
            popupWin.document.close();
            popupWin.close();
        }
    } else {
        var popupWin = window.open('', '_blank', 'width=800,height=600');
        popupWin.document.open();
        popupWin.document.write('<html><head><link rel="stylesheet" type="text/css" href="style.css" /></head><body onload="window.print()">' + printContents + '</html>');
        popupWin.document.close();
    }
    popupWin.document.close();

    return true;
  }

  
    

  $scope.printPDF = function () {
    var 
    form = $('.table-responsive'),
    cache_width = form.width(),
    a4  =[ 595.28,  841.89];  // for a4 size paper width and height
    $('body').scrollTop(0);
    createPDF();
    
    //create pdf
    function createPDF(){
     getCanvas().then(function(canvas){
      var 
      img = canvas.toDataURL("image/png"),
      doc = new jsPDF({
              unit:'px', 
              format:'a4'
            });     
            doc.addImage(img, 'JPEG', 20, 20);
            doc.save('tabla.pdf');
            form.width(cache_width);
     });
    }
     
    // create canvas object
    function getCanvas(){
      form.width((a4[0]*1.33333) -80).css('max-width','none');
        return html2canvas(form,{
          imageTimeout:2000,
          removeContainer:true
        }); 
      }
  }
 


  var userId = loginService.getUserId();
  $scope.userId = userId;

  $scope.vm = {
    done: '',
    client: ''
  };

  $scope.searchReferent = '';

  $scope.reverse = false;
  $scope.order = function(predicate) {
    $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
    $scope.predicate = predicate;
  };
  
  $scope.exportAction = function(type) {
    switch (type) {
      case 'pdf':
        $scope.$broadcast('export-pdf', {});
        break;
      case 'excel':
        $scope.$broadcast('export-excel', {});
        break;
      case 'doc':
        $scope.$broadcast('export-doc', {});
        break;
      default:
        console.log('no event caught');
    }
  }

  $scope.filterUser = function(value) {
    if (value) {
      updateMyProfile();
    }
  }

  $scope.getHeader = function() {
    return ["id", "sar", "title", "description", "creation_date", "done", "start_date", "finish_date", "client", "user", "priority", "urgency", "estimation_hours", "module"]
  };

  $scope.filterFullname = function(data) {
    
    var search = $scope.searchReferent.toLowerCase();

    if(data.relation === 'H'){
      var dt = data.userR.first_name.toLowerCase() + data.userR.last_name.toLowerCase();
    }else{
      var dt = data.user.first_name.toLowerCase() + data.user.last_name.toLowerCase();
    }
    
    if (dt.indexOf(search) >= 0) {
      return true
    }else{
      return false
    }
  };

  function getTasks() {
    var tasks = [];
    var indArray = [];
    var user;
    var rel = {};

    loginService.getUser().then(function(user_data){
      rel = { user: user_data };
    });
    
    UserClientResource.query({
      userR: userId
    }, function(data) {
      var count = 0;
      data.push(rel);
      data.forEach(function(rel) {
        taskResource.query({
          done: 'False',
          user_client: userId
        }, function(data) {
          if (data.length > 0) {
            data.forEach(function(element){
              // dont repeat tasks
              if(indArray.indexOf(element.id) === -1){
                indArray.push(element.id)  
                tasks.push(element);
                count++;
              }
            })
          }
          $scope.count = count;
        });
      })
      $scope.tasks = tasks;
    })
  }
  getTasks();

  $scope.doneTask = function(taskId) {
    taskResource.get({
      taskId: taskId
    }, function(task) {
      task.done = true;
      taskResource.update({
        taskId: task.id
      }, task);
    });
    getTasks();
  };

  $scope.deleteTask = function(taskId) {
    taskResource.delete({
      id: taskId
    });
    $timeout(getTasks, 500);
  };

  function getClients() {
    var all = {
      user: {
        id: '',
        first_name: 'Todos',
        last_name: '',
      },
      userR: {
        id: '',
        first_name: 'Todos',
        last_name: '',
      }
    };

    UserClientResource.query({
      user : userId
    }, function(data) {
      UserClientResource.query({
        userR : userId
      }, function(data2) {
        Array.prototype.push.apply(data, data2);
        data.unshift(all);
        $scope.clients = data;
      });
    });
  };
  getClients();

  UserClientResource.query({
    user: userId,
    relation: 'D'
  }, function(data) {
    $scope.clientsM = data;
  });

  statusResource.query({}, function(data) {
    $scope.Tstatus = data;
  });

  moduleResource.query({}, function(data) {
    $scope.modules = data;
  });

  urgencyResource.query({}, function(data) {
    $scope.urgency = data;
  });

  $scope.newTask = function() {
    $scope.task.user = loginService.getUserId();;
    taskResource.save($scope.task);
    $scope.task = null;
    $('#myModal').modal('hide');
    $timeout(getTasks, 500);
  };
}

app.controller('taskHController', taskHFunction);

function taskHFunction($scope, taskResource, UserClientResource, $location, $timeout, statusResource, moduleResource, urgencyResource, loginService) {
  var userId = loginService.getUserId();

  $scope.vm = {
    done: '',
    client: ''
  };

  function getTasks() {
    var tasks = [];
    var indArray = [];
    var user;
    var rel = {};
    $scope.count = 0;

    loginService.getUser().then(function(user_data){
      rel = { user: user_data };
    });
    
    UserClientResource.query({
      userR: userId
    }, function(data) {
      data.push(rel);
      data.forEach(function(rel) {
        taskResource.query({
          done: 'True',
          user_client: userId
        }, function(data) {
          if (data.length > 0) {
            data.forEach(function(element){
              // dont repeat tasks
              if(indArray.indexOf(element.id) === -1){
                indArray.push(element.id)  
                tasks.push(element);  
                $scope.count++;
              }
            })
          }
        });
      })
      $scope.tasks = tasks;
    })
  }
  getTasks();

  function getClients() {
    var all = {
      user: {
        id: '',
        first_name: 'Todos',
        last_name: '',
      },
      userR: {
        id: '',
        first_name: 'Todos',
        last_name: '',
      }
    };

    UserClientResource.query({
      user : userId
    }, function(data) {
      UserClientResource.query({
        userR : userId
      }, function(data2) {
        Array.prototype.push.apply(data, data2);
        data.unshift(all);
        $scope.clients = data;
      });
    });
  };
  getClients();
}

app.controller('commentsController', commentsFunction);

function commentsFunction($scope, taskCommentsResource, $routeParams, taskResource, notificationResource, $timeout,
 $location, toaster, fileUpload, loginService, urgencyResource, statusResource, moduleResource, userService, configurationResource, $q) {

  // page start for pagination
  $scope.currentPage = 1;
  $scope.currentPageAttach = 1;

  var taskId = parseInt($routeParams.taskId, 10);
  var userId = loginService.getUserId();

  $scope.userId = userId;

  $scope.getAvatar = function(user){
    var avatar = '';
    userService.getAvatar(user).then(function(data){
      console.log(data);
      avatar = data;
    });
    return avatar;
  }

  function getTask(){
      taskResource.get({
      id: taskId
    }, function(task) {
      $scope.task = task;
    });
  }
  getTask();

  function getComments() {
    taskCommentsResource.get({
      task: taskId
    }, function(data) {

      angular.forEach(data.results, function(value, key){
        var test = configurationResource.query({
          user : value.user.id
        }).$promise.then(function(data2){
          //data.results.user['avatar'] = data2[0].avatar;
        });
      });

      $scope.allComments = data.results;
      $scope.totalItems = data.count;
    })
  };
  getComments();

  function getAttachments() {
    taskCommentsResource.get({
      task: taskId,
      attachment: 'True',
      page: $scope.currentPageAttach
    }, function(data) {
      $scope.attachments = data.results;
      $scope.totalAttach = data.count;
    })
  };
  getAttachments();

  // refresh content with page changes
  $scope.pageChanged = function() {
    taskCommentsResource.get({
      task: taskId,
      page: $scope.currentPage
    }, function(data) {
      $scope.allComments = data.results;
    })
  };

  $scope.pageChangedAttach = function() {
      taskCommentsResource.get({
      task: taskId,
      attachment: 'True',
      page: $scope.currentPageAttach
    }, function(data) {
      $scope.attachments = data.results;
    })
  };

  // colors for milestones
  $scope.getClass = function(dateMilestone){
    if (dateMilestone) {
      var dateM = new Date(dateMilestone);
      var now = new Date();
      var timeDiff = dateM.getTime() - now.getTime();
      var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

      if(diffDays < 0){
        return 'past'
      }

      if(diffDays === 0){
        return 'now'
      }
      if(diffDays > 0 && diffDays <= 14){
        return 'next'
      }
      if(diffDays > 15){
        return 'future'
      }
    }
  }

  $scope.newComment = function() {
    var cTask = $scope.task;
    var file = $scope.cm.docfile;
    var comment = $scope.cm.comment;
    var uploadUrl = "/taskComment/";
    if(cTask && comment) {
      fileUpload.uploadFileToUrl(taskId, userId, comment, file, uploadUrl);

      // if user logged is client , make notification to user
      // if user logged is user , make notification to client
      var ntArray = [];
      switch(userId) {
      case cTask.client.id:
        var nt = new notificationResource;
        nt.user = userId;
        nt.userN = cTask.user.id;
        nt.ntype = $scope.cm.comment;
        nt.task = taskId;
        nt.$save();
        break;
      case cTask.user.id:
        var nt = new notificationResource;
        nt.user = userId;
        nt.userN = cTask.client.id;
        nt.ntype = $scope.cm.comment;
        nt.task = taskId;
        nt.$save();
        break;
      default:
        ntArray.push(cTask.user.id);
        ntArray.push(cTask.client.id);
        ntArray.forEach(function(ele){
          var nt = new notificationResource;
          nt.user = userId;
          nt.userN = ele;
          nt.ntype = $scope.cm.comment;
          nt.task = taskId;
          nt.$save();
        })
      }  
    }
    
    $timeout(getComments, 300);
    $timeout(getAttachments, 300);

    // refresh comments and go to page 1
    $scope.currentPage = 1;
    // clean
    $scope.cm = null;
  };

  $scope.deleteComment = function(commentId) {
    if (confirm("Esta seguro de borrar el comentario ?")) {
      taskCommentsResource.delete({
        id: commentId
      })
      Materialize.toast('El comentario se borro correctamente.', 2000, '');
      $timeout(getComments, 300);
      $timeout(getAttachments, 300);
    }
  };

  $scope.makeFavourite = function(comment) {
    comment.favourite = !comment.favourite;
    taskCommentsResource.update({ id: comment.id }, { 
      comment: comment.comment, 
      favourite: comment.favourite 
    }, function(){
      Materialize.toast('El usuario marco/desmarco como destacado el comentario.', 2000, '');
    }, function(){
      Materialize.toast('El usuario no tiene permiso para marcar como destacado.', 2000, '');
    });
    $timeout(getComments, 300);
  };

  $scope.deleteTask = function() {
    if (confirm("Esta seguro de borrar la tarea ?")) {
      var cTask = $scope.task;
      cTask.$delete();
      $location.path("/");
      Materialize.toast('La tarea se borro correctamente.', 2000, '');
    }
  };

  $scope.doneTask = function() {
    if (confirm("Esta seguro de cerrar la tarea ?")) {
      var cTask = $scope.task;
      taskResource.update({
        id: cTask.id,
        done: true
      }, function(){
        $location.path("/taskhistory");
        $scope.tasks = taskResource.query({
          done: 'False'
        });
        Materialize.toast('La tarea se cerro correctamente.', 2000, '');
      }, function(){
        Materialize.toast('El usuario no tiene permiso para cerrar la tarea.', 2000, '');
      });
    }
  };

  $scope.openTask = function() {
    if (confirm("Esta seguro de abrir la tarea ?")) {
      var cTask = $scope.task;
      taskResource.update({
        id: cTask.id,
        done: false
      }, function(){
        $location.path("/");
        $scope.tasks = taskResource.query({
          done: 'False'
        });
        Materialize.toast('La tarea se cerro correctamente.', 2000, '');
      }, function(){
        Materialize.toast('El usuario no tiene permiso para abrir la tarea.', 2000, '');
      });
    }
  };

  statusResource.query({}, function(data) {
    $scope.Tstatus = data;
  });

  moduleResource.query({}, function(data) {
    $scope.modules = data;
  });

  urgencyResource.query({}, function(data) {
    $scope.urgency = data;
  });

  $scope.updateTask = function (){
    taskResource.update({
        id: taskId
      }, {
        estimation_hours : $scope.task_update.estimation_hours,
        identificator : $scope.task_update.identificator,
        implementation_id : $scope.task_update.implementation_id,
        start_date : $scope.task_update.start_date,
        finish_date : $scope.task_update.finish_date,
        urgency : $scope.task_update.urgency,
        module : $scope.task_update.module,
        status : $scope.task_update.status,
        priority : $scope.task_update.priority,
        om : $scope.task_update.om
      }, function(){
        Materialize.toast('Se actualizo la tarea.', 2000, '');
        $timeout(getTask, 300) 
      }, function(err){
        Materialize.toast('El usuario no tiene permiso para modificar esta tarea.', 2000, '');
      }
    );
  }

  $scope.updateComment = function (activeComment){
    if(activeComment.comment){
      taskCommentsResource.update({
        id: activeComment.id
      }, {
        comment : activeComment.comment
      });
      Materialize.toast('El comentario fue actualizado.', 2000, '');
    }else{
      Materialize.toast('El comentario no puede estar vacio.', 2000, '');
    }
  }
}

app.controller('mainController', mainFunction);

function mainFunction($scope, notificationResource, $timeout, $http, $location, loginService, localStorageService, notificationService, $rootScope) {
  // if user have token
  if (localStorageService.get('token')) {
    var user = {};
    $http.defaults.headers.common.Authorization = 'Token ' + localStorageService.get('token');
    loginService.getUser().then(function(user){
      $scope.username = user.username;
      $rootScope.online = true;
      $scope.avatar = user.avatar;
    });
    getAllNotifications(user.id);
  }

  function getAllNotifications(userId) {
    notificationService.getAllNotifications(user.id).then(function(data) {
      $scope.countNotification = data.count;
      $scope.notifications = data.results;
    });
  };

  // refresh content with page changes
  $scope.pageChanged = function() {
    taskCommentsResource.get({
      task: user.id,
      page: $scope.currentPage
    }, function(data) {
      $scope.notifications = data.results;
    })
  };

  $scope.markAsRead = function(all) {
    all.forEach(function(data) {
      data.read = true;
      notificationResource.update({
        id: data.id
      }, data);
    });
    $timeout(getAllNotifications, 500);
  };

  $scope.readNotification = function(task){
    var user = loginService.getUser();
    notificationResource.update({
      id: task.id
    }, {
      user : task.user.id,
      userN : task.userN,
      task : task.task,
      ntype : task.ntype,
      read: true
    }, function(){
      $timeout(getAllNotifications, 500);
      $location.path("/task/" + task.task);
    });
  };  

  $scope.logout = function() {
    loginService.logout();
    localStorageService.get('user')
    $scope.online = false;
  };
}

app.controller('todoController', todoFunction);

function todoFunction($scope, todoResource, $timeout, $routeParams, loginService, $route) {
  var userId = loginService.getUserId();
  var taskId = parseInt($routeParams.taskId)

  function getTodoTask() {
    if (taskId) {
      todoResource.query({
        user: userId,
        task: taskId
      }, function(data) {
        $scope.todoTasks = data;
      });
    } else {
      todoResource.query({
        user: userId,
        task_is_null: "True"
      }, function(data) {
        $scope.todoTasks = data;
      });
    }

  };
  getTodoTask();

  $scope.newTodo = function() {
    var td = new todoResource;

    // for individual task todo's
    if (taskId) {
      td.task = taskId;
    };

    td.description = $scope.todo.description;
    td.user = userId;
    if($scope.todo.dtime) {
      td.dtime = $scope.todo.dtime;  
    }else{
      td.dtime = new Date();
    }
    
    td.$save(function(u) {
      $timeout(getTodoTask, 300);
      $route.reload();
    });

    todoResource.query({ user: userId, task_is_null: "True" }).$promise.then(function(data){
      $scope.todoTasks = data;
    })

    $scope.todo.description = null;
  }

  $scope.deleteTodo = function(todoId) {
    todoResource.get({
      id: todoId
    }, function(data) {
      todoResource.delete({
        id: data.id
      });
      $timeout(getTodoTask, 500);
    });
  }

  $scope.doneTodo = function(todoId) {
    var td = todoResource.get({
      id: todoId
    }, function(data) {
      var td = data;
      td.done = !td.done;
      td.$update();
      $timeout(getTodoTask, 500);
    });
  }
}

app.controller('loginController', loginController)

function loginController($scope, $http, localStorageService, loginService) {
  var vm = this;
  vm.usr = {};

  $scope.login = function() {
    var vm = this;
    var data = {
      username: vm.usr.username,
      password: vm.usr.password
    };

    localStorageService.set('data_login', data);
    loginService.login();
  }

  $scope.register = function() {
    var vm = this;
    var data = {
      username: vm.usr.new_username,
      password: vm.usr.new_password,
    };

    // Registro usuario
    $http.post('http://localhost:8000/auth/register/', data_register).then(function(result) {
      // Una vez registrado , logueo usuario
      localStorageService.set('data_login', data)
      loginService.login();
    });
  }

  $scope.resetPassword = function() {
    loginService.resetPassword();
  }
}

app.controller('configController', configController);

  function configController($scope, UserClientResource, usersResource, $injector, $timeout, configurationResource, loginService, avatarUpload) {

    var userId = loginService.getUserId();

    configurationResource.query({
      user: userId
    }, function(data) {
      $scope.user = data[0];
    });

    loginService.getUser().then(function(user){
      $scope.avatar = user.avatar;
    });

    $scope.save = function() {

    // Arma relacion directa con cada uno de los seleccionados en el combo.
    angular.forEach($scope.relYes, function(value, key) {
      var rel = {
        user: userId,
        userR: value.id,
        relation: 'D'
      };
      UserClientResource.save(rel);

      // Empieza el camino de la herencia.
      // Padre va a ser el usuario con el cual se vincula en la relacion original directa.
      var padre = value.id;

      // Busca hijo en columna de padre
      UserClientResource.query({
        userR: userId
      }, function(data) {

        angular.forEach(data, function(value, key) {
          var rel = {
            user: value.user.id,
            userR: padre,
            relation: 'H'
          };
          UserClientResource.save(rel);
        });
      });
    });
  };

  $scope.changeStatus = function() {
    var user = $scope.user;
    user.online = !user.online;
    user.$save();
  };

  function getNrel() {
    usersResource.query({
      ne: userId
    }, function(data) {
      $scope.relNo = data;
    });
  };

  function getYrel() {
    UserClientResource.query({
      user_id: userId
    }, function(data) {
      $scope.relYes = data;
    });
  };

  getNrel();
  getYrel();
  $scope.uploadAvatar = function(){
    var data = $scope.user
    var file = $scope.user.avatar;
    var uploadUrl = "/userProfile/" + data.user.id;
    avatarUpload.uploadFileToUrl(data, file, uploadUrl);
  }


};

app.controller('messagesController', messageFunction);

function messageFunction($scope, UserClientResource, loginService) {

  function getClients() {
    UserClientResource.query({
      user_id: loginService.getUserId()
    }, function(data) {
      all = {
        id: '',
        name: 'Todos',
        lastname: '',
        organization: 0
      }
      data.unshift(all);
      $scope.clients = data;
    });
  };
  getClients();
}


app.controller('tipController', tipFunction);

function tipFunction($scope, tipResource, loginService, $timeout, toaster) {

  var userId = loginService.getUserId();

  function getTips() {
    tipResource.query({
      user: userId
    }, function(data) {
      $scope.tips = data;
    });
  };
  getTips();

  $scope.newTip = function(){
    $scope.tip.user = userId;
    tipResource.save($scope.tip , 
      function(resp, headers){
        $scope.tip.color = '';
        $scope.tip.category = '';
        $scope.tip.description = '';
      }
    );
    $timeout(getTips, 300)
  }

  $scope.updateTip = function(tip){
    tipResource.update({ id: tip.id }, tip, function(){
      Materialize.toast('El tip fue actualizado.', 2000, '');
    }, function(){
      Materialize.toast('Ocurrio un error, el tip no fue actualizado.', 2000, '');
    });
  }

  $scope.deleteTip = function(tip){
    if (confirm("Esta seguro de borrar el tip ?")) {
      tipResource.delete({
        id: tip.id
      });
      Materialize.toast('El tip fue borrado.', 2000, '');
      $timeout(getTips, 300)
    }
  }

  $scope.printDiv = function (divName) {

    var printContents = document.getElementById(divName).innerHTML;
    var originalContents = document.body.innerHTML;      

    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
        var popupWin = window.open('', '_blank', 'width=600,height=600,scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
        popupWin.window.focus();
        popupWin.document.write('<!DOCTYPE html><html><head>' +
            '<link rel="stylesheet" type="text/css" href="style.css" />' +
            '</head><body onload="window.print()"><div class="reward-body">' + printContents + '</div></html>');
        popupWin.onbeforeunload = function (event) {
            popupWin.close();
            return '.\n';
        };
        popupWin.onabort = function (event) {
            popupWin.document.close();
            popupWin.close();
        }
    } else {
        var popupWin = window.open('', '_blank', 'width=800,height=600');
        popupWin.document.open();
        popupWin.document.write('<html><head><link rel="stylesheet" type="text/css" href="style.css" /></head><body onload="window.print()">' + printContents + '</html>');
        popupWin.document.close();
    }
    popupWin.document.close();

    return true;
  }
}

app.controller('milestoneController', milestoneFunction);

function milestoneFunction($scope, $routeParams, milestoneResource, loginService, $timeout, notificationResource, taskResource, notificationService) {
  var taskId = parseInt($routeParams.taskId, 10);
  var userId = loginService.getUserId();
  $scope.userId = userId;

  function getMilestones() {
    milestoneResource.query({
      task: taskId
    }, function(data) {
      $scope.milestones = data;
    });
  };
  getMilestones();

  $scope.addMilestone = function(){
    var ml = $scope.newMilestone;
    ml.task = taskId;
    ml.user = userId;
    milestoneResource.save(ml);

    // notification to users // owner // client
    taskResource.get({
      id: taskId
    }, function(task) {
      var nt = new notificationResource;
      nt.user = userId;
      nt.userN = task.user.id;
      nt.ntype = 'Nuevo hito @ ' + ml.date + ' '  + ml.description
      nt.task = taskId;
      nt.$save();

      var nt = new notificationResource;
      nt.user = userId;
      nt.userN = task.client.id;
      nt.ntype = 'Nuevo hito @ ' + ml.date + ' '  + ml.description
      nt.task = taskId;
      nt.$save();
    });

    $scope.newMilestone = null;
    $timeout(getMilestones, 300);
    notificationService.getAllNotifications(userId);
  }

  $scope.deleteMilestone = function(milestoneId) {
    if (confirm("Esta seguro de borrar el hito ?")) {
      milestoneResource.delete({
        id: milestoneId
      })
      $timeout(getMilestones, 300);
    }
  };

  $scope.doneMilestone = function(milestone) {
    milestone.done = !milestone.done;
    milestoneResource.update({ id: milestone.id }, milestone);
    $timeout(getMilestones, 300);
  };


}

app.provider('taskProvider', UnicornLauncherProvider);

function UnicornLauncherProvider() {
  var useTinfoilShielding = false;

  this.useTinfoilShielding = function(value) {
    useTinfoilShielding = !!value;
  };

  this.$get = ["apiToken", function unicornLauncherFactory(apiToken) {
    return new UnicornLauncher(apiToken, useTinfoilShielding);
  }];
}

app.value('scDateTimeI18n', {
    previousMonth: "Mes anterior",
    nextMonth: "Mes siguiente",
    incrementHours: "Incrementar horas",
    decrementHours: "Disminuir horas",
    incrementMinutes: "Incrementar minutos",
    decrementMinutes: "Disminuir minutos",
    switchAmPm: "Cambiar AM/PM",
    now: "Ahora",
    cancel: "Cancelar",
    save: "Guardar",
    weekdays: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
    switchTo: 'Cambiar a',
    clock: 'Reloj',
    calendar: 'Calendario',
});

app.value('scDateTimeConfig', {
  defaultTheme: 'material',
  autosave: true,
  defaultMode: 'full',
  displayTwentyfour: true,
})