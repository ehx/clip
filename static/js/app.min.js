'use strict';

var app = angular.module('app', [
  'ngResource',
  'ngCookies',
  'ngRoute',
  'ui.bootstrap',
  'ui.select',
  'ngSanitize',
  'xeditable',
  'toaster',
  'ngAnimate',
  'textAngular',
  'ngFileUpload',
  'NgSwitchery',
  'isteven-multi-select',
  'LocalStorageModule',
  'ngCsv',
  'angular.filter' 
]);

app.controller('taskController', taskFunction);

function taskFunction($scope, taskResource, UserClientResource, $location, $timeout, statusResource, moduleResource, urgencyResource, loginService) {

  
  $scope.exportAction = function(type) {
    switch (type) {
      case 'pdf':
        $scope.$broadcast('export-pdf', {});
        break;
      case 'excel':
        $scope.$broadcast('export-excel', {});
        break;
      case 'doc':
        $scope.$broadcast('export-doc', {});
        break;
      default:
        console.log('no event caught');
    }
  }

  $scope.getHeader = function() {
    return ["id", "sar", "title", "description", "creation_date", "done", "start_date", "finish_date", "client", "user", "priority", "urgency", "estimation_hours", "module"]
  };

  var userId = loginService.getUserId();

  $scope.vm = {
    done: '',
    client: ''
  };

  $scope.searchReferent = '';
  $scope.filterFullname = function(data) {
    return (data.user.first_name.toLowerCase() + data.user.last_name.toLowerCase()).indexOf($scope.searchReferent.toLowerCase()) >= 0;
  };

  // obtiene las tareas
  function getTasks() {
    UserClientResource.query({
      userR: userId
    }, function(data) {
      var tasks = [];
      var indArray = [];
      var user = loginService.getUser();
      var rel = {
        user: user
      }
      data.push(rel);
      data.forEach(function(rel) {
        var userId = rel.user.id;
        taskResource.query({
          done: 'False',
          user_client: userId
        }, function(data) {
          if (data.length > 0) {
            data.forEach(function(element){
              // busco en el array de index , si ya esta includia la tarea, no la vuelvo a cargar
              if(indArray.indexOf(element.id) === -1){
                indArray.push(element.id)  
                tasks.push(element);  
              }
            })
          }
        });
      })
      $scope.tasks = tasks;
    })
  }
  getTasks();

  // marca como realizada la tarea
  $scope.doneTask = function(taskId) {
    taskResource.get({
      taskId: taskId
    }, function(task) {
      task.done = true;
      taskResource.update({
        taskId: task.id
      }, task);
    });
    getTasks();
  };

  // borra la tarea
  $scope.deleteTask = function(taskId) {
    taskResource.delete({
      id: taskId
    });
    $timeout(getTasks, 500);
  };

  // obtiene todos los clientes
  function getClients() {
    UserClientResource.query({
      userR: userId
    }, function(data) {
      var all = {
        user: {
          id: '',
          first_name: 'Todos',
          last_name: '',
        }
      };
      data.unshift(all);

      $scope.clients = data;
    });
  };
  getClients();

  // carga select con estados
  statusResource.query({}, function(data) {
    $scope.Tstatus = data;
  });

  // carga select con modulos
  moduleResource.query({}, function(data) {
    $scope.modules = data;
  });

  // carga select con urgencia
  urgencyResource.query({}, function(data) {
    $scope.urgency = data;
  });

  // crea tarea
  $scope.newTask = function() {
    $scope.task.user = loginService.getUserId();;
    $uct = taskResource.save($scope.task);
    $uct.user = $scope.task.user;
    $uct.userR = $scope.task.client;
    $scope.task = null;

    // carga relacion usuario cliente tarea
    UserClientResource.save($uct);
    $('#myModal').modal('hide');
    $timeout(getTasks, 500);
  };
}

app.controller('taskHController', taskHFunction);


function taskHFunction($scope, taskResource, UserClientResource, $location, $timeout, statusResource, moduleResource, urgencyResource, loginService) {

  var userId = loginService.getUserId();

  $scope.vm = {
    done: '',
    client: ''
  };

// obtiene las tareas
  function getTasks() {
    UserClientResource.query({
      userR: userId
    }, function(data) {
      var tasks = [];
      var indArray = [];
      var user = loginService.getUser();
      var rel = {
        user: user
      }
      data.push(rel);
      data.forEach(function(rel) {
        var userId = rel.user.id;
        taskResource.query({
          done: 'True',
          user_client: userId
        }, function(data) {
          if (data.length > 0) {
            data.forEach(function(element){
              // busco en el array de index , si ya esta includia la tarea, no la vuelvo a cargar
              if(indArray.indexOf(element.id) === -1){
                indArray.push(element.id)  
                tasks.push(element);  
              }
            })
          }
        });
      })
      $scope.tasks = tasks;
    })
  }
  getTasks();

  // obtiene todos los clientes
  function getClients() {
    UserClientResource.query({
      userR: userId
    }, function(data) {
      var all = {
        user: {
          id: '',
          first_name: 'Todos',
          last_name: '',
        }
      };
      data.unshift(all);

      $scope.clients = data;
    });
  };
  getClients();
}

app.controller('commentsController', commentsFunction);

function commentsFunction($scope, taskCommentsResource, $routeParams, taskResource, notificationResource, $timeout,
 $location, toaster, fileUpload, loginService, urgencyResource, statusResource, moduleResource) {
  // numero de pagina inicial para paginador
  $scope.currentPage = 1;

  // obtiene el id de la tarea desde la url y la convierte a int
  var taskId = parseInt($routeParams.taskId, 10);

  var userId = loginService.getUserId();

  $scope.userId = userId;

  // obtengo tarea actual
  function getTask(){
      taskResource.get({
      id: taskId
    }, function(task) {
      $scope.task = task;
    });
  }
  getTask();

  // obtiene comentarios de la tarea seleccionada
  function getComments() {
    taskCommentsResource.get({
      task: taskId
    }, function(data) {
      $scope.allComments = data.results;
      $scope.totalItems = data.count;
    })
  };
  getComments();

  // Lista de adjuntos
  function getAttachments() {
    taskCommentsResource.get({
      task: taskId,
      attachment: 'True'
    }, function(data) {
      $scope.attachments = data.results;
    })
  };
  getAttachments();

  // cuando cambia la pagina , setea numero de pagina en la consulta y actualiza los resultados
  $scope.pageChanged = function() {
    taskCommentsResource.get({
      task: taskId,
      page: $scope.currentPage
    }, function(data) {
      $scope.allComments = data.results;
    })
  };

  // colors for events!
  $scope.getClass = function(dateMilestone){
    if (dateMilestone) {
      var dateM = new Date(dateMilestone);
      var now = new Date();
      var timeDiff = dateM.getTime() - now.getTime();
      var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));

      if(diffDays < 0){
        return 'past'
      }

      if(diffDays === 0){
        return 'now'
      }
      if(diffDays > 0 && diffDays <= 14){
        return 'next'
      }
      if(diffDays > 15){
        return 'future'
      }
    }
  }

  // crea nuevo comentario
  $scope.newComment = function() {
    var cTask = $scope.task;
    var file = $scope.cm.docfile;
    var comment = $scope.cm.comment;
    var uploadUrl = "/taskComment/";
    fileUpload.uploadFileToUrl(taskId, userId, comment, file, uploadUrl);

    // notifica al usuario
    // si el usuario logueado es cliente , genera notificacion a usuario
    // si es usuario , genera notificacion a cliente
    var ntArray = [];
    switch(userId) {
    case cTask.client.id:
      var nt = new notificationResource;
      nt.user = userId;
      nt.userN = cTask.user.id;
      nt.ntype = $scope.cm.comment;
      nt.task = taskId;
      nt.$save();
      break;
    case cTask.user.id:
      var nt = new notificationResource;
      nt.user = userId;
      nt.userN = cTask.client.id;
      nt.ntype = $scope.cm.comment;
      nt.task = taskId;
      nt.$save();
      break;
    default:
      ntArray.push(cTask.user.id);
      ntArray.push(cTask.client.id);
      ntArray.forEach(function(ele){
        var nt = new notificationResource;
        nt.user = userId;
        nt.userN = ele;
        nt.ntype = $scope.cm.comment;
        nt.task = taskId;
        nt.$save();
      })
    }
    $timeout(getComments, 300);
    $timeout(getAttachments, 300);

    // Vuelvo a seleccionar la primer hoja para el paginado
    $scope.currentPage = 1;
    // limpia formulario
    $scope.cm = null;
  };

  $scope.deleteComment = function(commentId) {
    taskCommentsResource.delete({
      id: commentId
    })
    $timeout(getComments, 300);
    $timeout(getAttachments, 300);
  };

  // borra tarea actual
  $scope.deleteTask = function() {
    if (confirm("Esta seguro de borrar la tarea ?")) {
      var cTask = $scope.task;
      cTask.$delete();
      $location.path("/");
      toaster.pop('success', 'Tarea', 'La tarea se borro correctamente.');
    }
  };

  // cierra tarea actual
  $scope.doneTask = function() {
    if (confirm("Esta seguro de cerrar la tarea ?")) {
      var cTask = $scope.task;
      taskResource.update({
        id: cTask.id,
        done: true
      });

      $location.path("/");
      $scope.tasks = taskResource.query({
        done: 'False'
      });
      toaster.pop('success', 'Tarea', 'La tarea se cerro correctamente.');
    }
  };

  $scope.openTask = function() {
    if (confirm("Esta seguro de abrir la tarea ?")) {
      var cTask = $scope.task;
      taskResource.update({
        id: cTask.id,
        done: false
      });
      $location.path("/");
      $scope.tasks = taskResource.query({
        done: 'False'
      });
      toaster.pop('success', 'Tarea', 'La tarea se cerro correctamente.');
    }
  };

  // carga select con estados
  statusResource.query({}, function(data) {
    $scope.Tstatus = data;
  });

  // carga select con modulos
  moduleResource.query({}, function(data) {
    $scope.modules = data;
  });

  // carga select con urgencia
  urgencyResource.query({}, function(data) {
    $scope.urgency = data;
  });

  $scope.updateTask = function (){
    taskResource.update({
        id: taskId
      }, {
        estimation_hours : $scope.task_update.estimation_hours,
        identificator : $scope.task_update.identificator,
        implementation_id : $scope.task_update.implementation_id,
        start_date : $scope.task_update.start_date,
        finish_date : $scope.task_update.finish_date,
        urgency : $scope.task_update.urgency,
        module : $scope.task_update.module,
        status : $scope.task_update.status,
      }, function(){
        $timeout(getTask, 300) 
      }
    );
  }

  $scope.updateComment = function (activeComment){
    if(activeComment.comment){
      taskCommentsResource.update({
        id: activeComment.id
      }, {
        comment : activeComment.comment
      });
    }else{
      toaster.pop('error', 'Error', 'El comentario no puede estar vacio');
    }
  }
}

app.controller('mainController', mainFunction);

function mainFunction($scope, notificationResource, $timeout, $http, $location, loginService, localStorageService, notificationService) {


  // if user have token
  if (localStorageService.get('token')) {
    $http.defaults.headers.common.Authorization = 'Token ' + localStorageService.get('token');
    var user = loginService.getUser();
    $scope.username = user.username;
    $scope.online = true;
    
    getAllNotifications(user.id);
  }

  // obtiene todas las notificaciones
  function getAllNotifications(userId) {
    notificationService.getAllNotifications(user.id).then(function(data) {
      $scope.countNotification = data.count;
      $scope.notifications = data.results;
    });
  };

  // marca todas como leidas
  $scope.markAsRead = function(all) {
    all.forEach(function(data) {
      data.read = true;
      notificationResource.update({
        id: data.id
      }, data);
    });
    $timeout(getAllNotifications, 500);
  };

  $scope.readNotification = function(task){
    var user = loginService.getUser();
    notificationResource.update({
      id: task.id
    }, {
      user : task.user.id,
      userN : task.userN,
      task : task.task,
      ntype : task.ntype,
      read: true
    }, function(){
      $timeout(getAllNotifications, 500);
      $location.path("/task/" + task.task);
    });
  };  

  $scope.logout = function() {
    loginService.logout();
    localStorageService.get('user')
    $scope.online = false;
  };
}

app.controller('todoController', todoFunction);

function todoFunction($scope, todoResource, $timeout, $routeParams, loginService) {
  var userId = loginService.getUserId();

  // lista de mis tareas, si lleva taskId lista solo checkist de una tarea especifica
  var taskId = parseInt($routeParams.taskId)

  function getTodoTask() {
    if (taskId) {
      todoResource.query({
        user: userId,
        task: taskId
      }, function(data) {
        $scope.todoTasks = data;
      });
    } else {
      todoResource.query({
        user: userId,
        task_is_null: "True"
      }, function(data) {
        $scope.todoTasks = data;
      });
    }
  };
  getTodoTask();

  // agrega tarea al usuario
  $scope.addTodo = function() {
    var td = new todoResource;

    // para diferenciar tareas individuales
    if (taskId) {
      td.task = taskId;
    };

    td.description = $scope.description;
    td.user = userId;
    td.$save();
    $timeout(getTodoTask, 500);

    //limpia campo descripcion de tarea
    $scope.description = null;
  }

  // borra tarea al usuario
  $scope.deleteTodo = function(todoId) {
    todoResource.get({
      id: todoId
    }, function(data) {
      todoResource.delete({
        id: data.id
      });
      $timeout(getTodoTask, 500);
    });
  }

  // marca tarea como realizada
  $scope.doneTodo = function(todoId) {
    var td = todoResource.get({
      id: todoId
    }, function(data) {
      var td = data;
      td.done = !td.done;
      td.$update();
      $timeout(getTodoTask, 500);
    });
  }
}

app.controller('loginController', loginController)

function loginController($scope, $http, localStorageService, loginService) {
  var vm = this;
  vm.usr = {};

  $scope.login = function() {
    var vm = this;
    var data = {
      username: vm.usr.username,
      password: vm.usr.password
    };

    localStorageService.set('data_login', data);
    loginService.login();
  }

  $scope.register = function() {
    var vm = this;
    var data = {
      username: vm.usr.new_username,
      password: vm.usr.new_password,
    };

    // Registro usuario
    $http.post('http://localhost:8000/auth/register/', data_register).then(function(result) {
      // Una vez registrado , logueo usuario
      localStorageService.set('data_login', data)
      loginService.login();
    });
  }

  $scope.resetPassword = function() {
    loginService.resetPassword();
  }
}

app.controller('configController', function($scope, UserClientResource, usersResource, $injector, $timeout, configurationResource, loginService) {

  var userId = loginService.getUserId();

  configurationResource.query({
    user: userId
  }, function(data) {
    $scope.user = data[0];
  });

  $scope.save = function() {

    // Arma relacion directa con cada uno de los seleccionados en el combo.
    angular.forEach($scope.relYes, function(value, key) {
      var rel = {
        user: userId,
        userR: value.id,
        relation: 'D'
      };
      UserClientResource.save(rel);

      // Empieza el camino de la herencia.
      // Padre va a ser el usuario con el cual se vincula en la relacion original directa.
      var padre = value.id;

      // Busca hijo en columna de padre
      UserClientResource.query({
        userR: userId
      }, function(data) {

        angular.forEach(data, function(value, key) {
          var rel = {
            user: value.user.id,
            userR: padre,
            relation: 'H'
          };
          UserClientResource.save(rel);
        });
      });
    });
  };

  $scope.changeStatus = function() {
    var user = $scope.user;
    user.online = !user.online;
    user.$save();
  };

  function getNrel() {
    usersResource.query({
      ne: userId
    }, function(data) {
      $scope.relNo = data;
    });
  };

  function getYrel() {
    UserClientResource.query({
      user_id: userId
    }, function(data) {
      $scope.relYes = data;
    });
  };

  getNrel();
  getYrel();
});

app.controller('messagesController', messageFunction);

function messageFunction($scope, UserClientResource, loginService) {

  // obtiene todos los clientes
  function getClients() {
    UserClientResource.query({
      user_id: loginService.getUserId()
    }, function(data) {
      all = {
        id: '',
        name: 'Todos',
        lastname: '',
        organization: 0
      }
      data.unshift(all);
      $scope.clients = data;
    });
  };
  getClients();
}

app.controller('milestoneController', milestoneFunction);

function milestoneFunction($scope, $routeParams, milestoneResource, loginService, $timeout, notificationResource, taskResource, notificationService) {

  // obtiene el id de la tarea desde la url y la convierte a int
  var taskId = parseInt($routeParams.taskId, 10);

  var userId = loginService.getUserId();

  $scope.userId = userId;

  // obtiene todos los clientes
  function getMilestones() {
    milestoneResource.query({
      task: taskId
    }, function(data) {
      $scope.milestones = data;
    });
  };
  getMilestones();

  $scope.addMilestone = function(){
    // create new milestone
    var ml = $scope.newMilestone;
    ml.task = taskId;
    ml.user = userId;
    milestoneResource.save(ml);

    // notification to users // owner // client
    taskResource.get({
      id: taskId
    }, function(task) {
      var nt = new notificationResource;
      nt.user = userId;
      nt.userN = task.user.id;
      nt.ntype = 'Nuevo hito @ ' + ml.date + ' '  + ml.description
      nt.task = taskId;
      nt.$save();

      var nt = new notificationResource;
      nt.user = userId;
      nt.userN = task.client.id;
      nt.ntype = 'Nuevo hito @ ' + ml.date + ' '  + ml.description
      nt.task = taskId;
      nt.$save();
    });

    $scope.newMilestone = null;
    $timeout(getMilestones, 300);
    notificationService.getAllNotifications(userId);
  }

  $scope.deleteMilestone = function(milestoneId) {
    if (confirm("Esta seguro de borrar el hito ?")) {
      milestoneResource.delete({
        id: milestoneId
      })
      $timeout(getMilestones, 300);
    }
  };


}

app.provider('taskProvider', UnicornLauncherProvider);

function UnicornLauncherProvider() {
  var useTinfoilShielding = false;

  this.useTinfoilShielding = function(value) {
    useTinfoilShielding = !!value;
  };

  this.$get = ["apiToken", function unicornLauncherFactory(apiToken) {
    return new UnicornLauncher(apiToken, useTinfoilShielding);
  }];
}